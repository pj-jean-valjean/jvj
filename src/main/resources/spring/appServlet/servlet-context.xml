<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:websocket="http://www.springframework.org/schema/websocket"
   xmlns:task="http://www.springframework.org/schema/task"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
      http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="edu.kh.jvj" />
	
	
	<!-- oauth2 login -->
	<beans:bean id="naverClientID" class="java.lang.String">
        <beans:constructor-arg value="5nKK1ckGkdD_iFLRVC67" />
	</beans:bean>
	<beans:bean id="naverClientSecret" class="java.lang.String">
	        <beans:constructor-arg value="qMkfw_T1UO" />
	</beans:bean>
	<beans:bean id="naverRedirectUrl" class="java.lang.String">
	
			<!-- 네이버 리다이렉트 주소 -->
	        <beans:constructor-arg value="http://localhost:8080/jvj/member/naver/callback" />
	</beans:bean>
	    
	<beans:bean id="naverSns" class="edu.kh.jvj.member.model.vo.SnsValue">
	        <beans:constructor-arg value="naver" />
	        <beans:constructor-arg ref="naverClientID" />
	        <beans:constructor-arg ref="naverClientSecret" />
	        <beans:constructor-arg ref="naverRedirectUrl" />
	</beans:bean>
	
	<beans:bean id="kakaoClientID" class="java.lang.String">
        <beans:constructor-arg value="dce5678c6c2aceeae891719b598cbe3b" />
	</beans:bean>
	
	<beans:bean id="kakaoClientSecret" class="java.lang.String">
	        <beans:constructor-arg value="7eTOUzByC4SNMlx0tLIRVihvm1Edygie" />
	</beans:bean>
	
	<beans:bean id="kakaoRedirectUrl" class="java.lang.String">
	        <beans:constructor-arg value="http://localhost:8080/jvj/member/kakao/callback" />
	</beans:bean>
	
	<beans:bean id="kakaoSns" class="edu.kh.jvj.member.model.vo.SnsValue">
	        <beans:constructor-arg value="kakao" />
	        <beans:constructor-arg ref="kakaoClientID" />
	        <beans:constructor-arg ref="kakaoClientSecret" />
	        <beans:constructor-arg ref="kakaoRedirectUrl" />
	</beans:bean>
	
	<!-- 웹소켓 클래스 Bean 등록 -->	
	<!-- 1. namespace 탭에서 Websocket을 체크 -->
	<!-- 2. Bean 생성 구문 작성 -->
	<beans:bean id="chattingHandler" class="edu.kh.jvj.chat.websocket.WebsocketHandler"/>
	
	<websocket:handlers>
		<!-- 웹소켓과 매핑할 요청 주소 작성 -->
		<!-- path : SockJS 생성 시 기입한 주소 작성 -->
		<!-- handler : 연결할 beanID(웹소켓을 다룰려고 만든 클래스) -->
		<websocket:mapping handler="chattingHandler" path="/chatting"/>
		
		<!-- interceptor : HTTP 요청 객체에서 request, response를 가로채는 역할 -->
		<!-- handshake-interceptors : 가로챈 내용 중 HttpSession을 별도로 가로챈 후 
									  연결된 클래스에 WebSocketSession 형태로 넣어주는 역할
		 -->
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>	
		</websocket:handshake-interceptors>
		
		<websocket:sockjs/>
	</websocket:handlers>
	
	
	 <task:annotation-driven/> 
	 
</beans:beans>
